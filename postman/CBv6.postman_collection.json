{
	"info": {
		"_postman_id": "3bf5c734-8817-481e-85b0-15fb8f54a401",
		"name": "CBv6",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24173044"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create User with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"User was not created\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyName\": \"{{$randomCompanyName}}\",\r\n    \"email\": \"1\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.include(\"User with this e-mail exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyname\": \"Gym\",\r\n    \"email\": \"vasyafit@gmail.com\",\r\n    \"firstName\": \"Vasya\",\r\n    \"lastName\": \"Pupkin\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Wrong password format\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyname\": \"fitness\",\r\n    \"email\": \"vasyaFAKE@gmail.com\",\r\n    \"firstName\": \"Vasya\",\r\n    \"lastName\": \"Pupkin\",\r\n    \"password\": \"    \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(res.message).to.eq(\"User created successfully. Please check your email and verify it\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"User created successfully. Please check your email and verify it\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"companyname\": \"{{$randomCompanyName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenV6\", pm.response.json().payload.token)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"LOGIN response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Auth success\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@gmail.com\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message with invalid password\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Auth failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"test@gmail.com\",\r\n    \"password\": \"invalid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message with invalid email\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Auth failed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"invalid\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Client",
			"item": [
				{
					"name": "Create Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"clientID\", pm.response.json().payload)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Client created\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Client Vasya Check\",\r\n    \"email\": \"clientVasya@mail.com\",\r\n    \"phone\": \"7777777\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Client with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Client create error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"clientVasya@mail.com\",\r\n    \"phone\": \"ABCDEF\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Get Client by id ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client/{{clientID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Client Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Client updated\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UPDATE\",\r\n    \"email\": \"UPDATE@EMAIL.NOM\",\r\n    \"phone\": \"+5555555\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client/{{clientID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Client Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"ClientSearch ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response body message\", function () {\r",
									"//     pm.expect(pm.response.json().message).to.eq(\"Client deleted\");\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/client/{{clientID}}10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"client",
								"{{clientID}}10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vendor",
			"item": [
				{
					"name": "Create Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"vendorID\", pm.response.json().payload)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Vendor created\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Vendor\",\r\n    \"phone\": \"123456987\",\r\n    \"email\": \"cleanVasya@mail.com\",\r\n    \"description\": \"the best cleaning service\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/vendor",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"vendor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vendor ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Get Vendor by id ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/vendor/{{vendorID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"vendor",
								"{{vendorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"VendorSearch ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/vendor/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"vendor",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Vendor updated\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Vendor Vasya The best Cleaning\",\r\n    \"phone\": \"111111111\",\r\n    \"email\": \"cleanVasya@mail.com\",\r\n    \"description\": \"the best of the best cleaning service\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/vendor/{{vendorID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"vendor",
								"{{vendorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Vendor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Vendor deleted\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/vendor/{{vendorID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"vendor",
								"{{vendorID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "Create Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"serviceID\", pm.response.json().payload)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Service created\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}} service\",\r\n    \"vendor\": {\r\n        \"_id\": \"{{vendorID}}\"\r\n    },\r\n    \"vendorPrice\": {{$randomPrice}},\r\n    \"clientPrice\": {{$randomPrice}},\r\n    \"description\": \"Clean very perfect\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Service with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Service create error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"work good\",\r\n    \"vendor\": {\r\n        \"_id\": \"invalid\"\r\n    },\r\n    \"vendorPrice\": 444,\r\n    \"clientPrice\": 333,\r\n    \"description\": \"Clean very perfect\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Service Search ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Get Service by id ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service/{{serviceID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service",
								"{{serviceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Service updated\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Cleaning for {{$randomStreetName}} service\",\r\n    \"vendor\": {\r\n        \"_id\": \"{{vendorID}}\"\r\n    },\r\n    \"vendorPrice\": {{$randomPrice}},\r\n    \"clientPrice\": {{$randomPrice}},\r\n    \"description\": \"Clean very perfect and desinfect\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service/{{serviceID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service",
								"{{serviceID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// pm.test(\"Response body message\", function () {\r",
									"//     pm.expect(pm.response.json().message).to.eq(\"Service deleted\");\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/service/{{serviceID}}10",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"service",
								"{{serviceID}}10"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orderID\", pm.response.json().payload)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Order created\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n        \"_id\": \"{{clientID}}\"\r\n    },\r\n    \"clientPaid\": {{$randomPrice}},\r\n    \"clientPrice\": {{$randomPrice}},\r\n    \"service\": {\r\n        \"_id\": \"{{serviceID}}\"\r\n    },\r\n    \"vendorPaid\": {{$randomPrice}},\r\n    \"vendorPrice\": {{$randomPrice}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Order create error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n        \"_id\": \"invalid\"\r\n    },\r\n    \"clientPaid\": \"5555\",\r\n    \"clientPrice\": \"555\",\r\n    \"service\": {\r\n        \"_id\": \"{{serviceID}}\"\r\n    },\r\n    \"vendorPaid\": 444,\r\n    \"vendorPrice\": 990\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Get Order by id ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order/{{orderID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"OrderSearch ok\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order/search",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Order updated\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n        \"_id\": \"{{clientID}}\"\r\n    },\r\n    \"clientPaid\": 4400000000000000008888888888888,\r\n    \"clientPrice\": 5000555555555554444444444444,\r\n    \"service\": {\r\n        \"_id\": \"{{serviceID}}\"\r\n    },\r\n    \"vendorPaid\": 8888000000066666666666,\r\n    \"vendorPrice\": 9000777777774444444444444\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order/{{orderID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Order update error\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"client\": {\r\n        \"_id\": \"{{clientID}}\"\r\n    },\r\n    \"clientPaid\": \"one one zero\",\r\n    \"clientPrice\": 5000,\r\n    \"service\": {\r\n        \"_id\": \"{{serviceID}}\"\r\n    },\r\n    \"vendorPaid\": \"invalid\",\r\n    \"vendorPrice\": 9000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order/{{orderID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body message\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eq(\"Order deleted\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenV6}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/order/{{orderID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"order",
								"{{orderID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}